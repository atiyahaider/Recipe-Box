const DISPLAY = 'Display';
const EDIT = 'Edit';
const ADD = 'Add';
const DELETE = 'Delete';
const INFO = 'Information';
const LocalStorageKey = '_atiyahaider_recipes';

class Modal extends React.Component {
  constructor(props) {
    super(props);
  }
  
  listenKeyboard = e => {
    if (e.key === 'Escape' || e.keyCode === 27) 
      this.props.handleClose();
  }

  componentDidMount() {
    window.addEventListener('keydown', this.listenKeyboard.bind(this), true);
  }

  componentWillUnmount() {
    window.removeEventListener('keydown', this.listenKeyboard.bind(this), true);
  }

  onOverlayClick = () => {
    this.props.handleClose();
  }

  onDialogClick = e => {
    e.stopPropagation();
  }
  
  render () {
    return (
      <div>
        <div className="modalOverlay" onClick={this.onOverlayClick}>
        </div>
        <div className="modalBox" onClick={this.onDialogClick}>
          {this.props.children}
        </div>
      </div>
    );
  };
}

class RecipeCard extends React.Component {
  constructor(props) {
    super(props)
    
    this.state = {
      name: '',
      ingredients: [''],
      directions: ''
    }
  }
  
  componentDidMount() {
    if (this.props.operation === EDIT) {
      this.setState({ name: this.props.recipe.name,
                      ingredients: [...this.props.recipe.ingredients],
                      directions: this.props.recipe.directions
      });
    }
  }
  
  handleChange = e => {
    if (e.target.id.startsWith('ingredient')) {
      let index = e.target.id.substr('ingredient'.length);
      let ingredients = [...this.state.ingredients];
      ingredients[index] = e.target.value;
      this.setState({ingredients});
    }
    else {
      this.setState({
        [e.target.id]: e.target.value
      });
    }
  }
  
  handleClose = () => {
    this.props.closeModal();
  }
  
  handleSubmit = e => {
    e.preventDefault();
    this.validateForm();
    this.props.processRecipe(this.state);
  }

  addIngredient = () => {
    let ingredients = this.state.ingredients.concat(['']);
    this.setState({ingredients});
  }
  
  removeIngredient = i => {
    let ingredients = [
      ...this.state.ingredients.slice(0, i),
      ...this.state.ingredients.slice(i + 1)
    ];
    this.setState({ingredients});      
  }
  
  validateForm() {
    let name = document.getElementById('name');
    if (name.value.trim() === '')
      name.setCustomValidity('Please enter a recipe name');
    else 
     name.setCustomValidity('');
    
    let ingredients = document.querySelectorAll("#ingredientList input");
    ingredients.forEach(ingredient => {
    if (ingredient.value.trim() === '')
      ingredient.setCustomValidity('Please enter an ingredient');
    else 
      ingredient.setCustomValidity('');
    });    
  }

  render() {
    return (
      <Modal handleClose={this.handleClose}>
        <div id="recipeCard">
          <div id="recipeCardHeader">
            <span class="close" onClick={this.handleClose}>&times;</span>
            { this.props.operation === EDIT ? <h2>Edit Recipe</h2> : <h2>Add a New Recipe</h2> }
          </div>
          <form onSubmit={this.handleSubmit}>
            <input type="text" id="name" value={this.state.name} onChange={this.handleChange} placeholder="Recipe Name..." onInput={this.validateForm} required/>
            
            <h3>Ingredients:</h3>
            {this.state.ingredients.map( (ingredient, j) => (
              <div id="ingredientList">
                <input type="text" id={'ingredient'+j} value={ingredient} onChange={this.handleChange} placeholder="Ingredient..." onInput={this.validateForm} required/>
                { this.state.ingredients.length > 1 &&
                  <div class="ingOperation button" onClick={() => this.removeIngredient(j)}>-</div>
                 }
              </div>    
            ))}
            <div class="ingOperation button" id="addIngredient" onClick={this.addIngredient}>+</div>
            <h3>Directions:</h3>
            <textarea id="directions" value={this.state.directions} onChange={this.handleChange} placeholder="Directions..." rows="5"></textarea>
            
            <div style={{textAlign: 'right'}}>
              <button id="submit" class="button" type="submit">Save</button>
              <button class="button" onClick={this.handleClose}>Cancel</button>
            </div>
          </form>
        </div>
      </Modal>
    )
  }
}

const DisplayRecipe = ({recipe, closeModal}) => {
  let md = window.markdownit();

  return (
    <Modal handleClose={closeModal}>
      <div id="recipeCard">
        <div id="recipeCardHeader">
          <span class="close" onClick={closeModal}>&times;</span>
          <h2>{recipe.name}</h2>
        </div>
        <div>
          <h3>Ingredients:</h3>
          <ul>
            {recipe.ingredients.map( (ingredient, j) => (
              <li class="ingredient" id={j}>{ingredient}</li>
            ))}
          </ul>
        </div>
        <div>
          <h3>Directions:</h3>
          <p dangerouslySetInnerHTML={{__html: md.render(recipe.directions)}}>
          </p>
        </div>
      </div>
    </Modal>      
  )
}

class ConfirmDelete extends React.Component {
  constructor(props) {
    super(props)
  }
  
  handleYes = () => {
    this.props.processRecipe();
  }

  handleClose = () => {
    this.props.closeModal();
  }

  render() {
    return (
      <Modal handleClose={this.handleClose}>
        <div id="recipeCard">
          <div id="recipeCardHeader">
            <span class="close" onClick={this.handleClose}>&times;</span>
            <h3>Delete Recipe</h3>
          </div>
          <div>Are you sure you want to delete this recipe?<br /><br /></div>
          <div style={{textAlign: 'right'}}>
            <button class="button" onClick={this.handleYes}>Yes</button>
            <button class="button" onClick={this.handleClose}>Cancel</button>
          </div>
        </div>
      </Modal>
    )
  }
}

const DisplayInfo = ({closeModal}) => {
  return (
    <Modal handleClose={closeModal}>
      <div id="recipeCard">
        <div id="recipeCardHeader">
          <span class="close" onClick={closeModal}>&times;</span>
          <h2>Information</h2>
        </div>
        <div id="information">
          <ul>
            <li>Create recipes with ingredients and directions.</li>
            <li>The Recipe Box has recipe cards displaying the recipe name and some of its ingredients. If there are more ingredients, "..." will be displayed at the bottom of the recipe card. To view a recipe in detail, click on the recipe card.</li>
            <li>To add a new recipe, click on the add (plus) button on top of the recipe box.</li>
            <li>To edit a recipe, click on the edit (pencil) button at the bottom of the recipe card.</li>
            <li>To add more ingredients when adding or editing a recipe, click on the + sign. To delete an ingredient, click on the - sign. Each recipe must have atleast one ingredient.</li>
            <li>To delete a recipe, click on the delete (trash) button at the bottom of the recipe card.</li>
            <li>All new recipes added, are saved in the browser's local storage. If the page is refreshed, these recipes will still be there. But if the browser's temp files are deleted, all the recipes will be lost.</li>
            <li>Mark-up is supported for entering the directions for the recipe.</li>
          </ul>
        </div>
      </div>
    </Modal>      
  )
}

const HeaderButtons = ({addRecipe, displayInfo}) => {
  return (
    <div id="header">
      <div class="headerButton" onClick={addRecipe} title="Add New Recipe"><i class="fas fa-plus"></i></div>
      <div class="headerButton" onClick={displayInfo} title="Information"><i class="fas fa-info"></i></div>
    </div>
  )
}

const Buttons = ({editRecipe, confirmDelete}) => {
  return (
    <div id="buttonDiv">
      <button class="button" onClick={editRecipe} title="Edit Recipe"><i class="fas fa-pencil-alt fa-lg"></i></button>
      <button class="button" onClick={confirmDelete} title="Delete Recipe"><i class="fas fa-trash-alt fa-lg"></i></button>
    </div>
  )
}

const Recipe = ({id, recipe, displayRecipe, editRecipe, confirmDelete}) => {
  return (
    <div class="recipe" id={id}>
      <div id="recipeBody" onClick={displayRecipe}><h3>{recipe.name}</h3>
        <ul>
          {recipe.ingredients.slice(0, 4).map( (ingredient, j) => (
            <li class="ingredient" id={'ing'+j}>{ingredient}</li>
          ))}
          {recipe.ingredients.length > 4 && <span style={{fontSize: '1.5rem'}}>...</span>} 
        </ul>
      </div>
      <Buttons 
        editRecipe={editRecipe} 
        confirmDelete={confirmDelete}
      />
    </div>
  )
}

class RecipeList extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      recipes: [{name: 'Fresh Lemonade', ingredients: ['1 cup freshly squeezed lemon juice (5 to 6 lemons)', '1/2 to 3/4 cup superfine sugar', '1 cup crushed ice', '4 cups water'], directions: 'Place all the ingredients in a blender and process until completely smooth. Serve over ice.'}, 
                {name: 'Spaghetti', ingredients: ['1 lb hamburger', '2 cubes beef bouillion', '1 can tomato sauce 8 oz', '1 can tomato paste 6 oz', 'pepper to taste', '2 cups hot water', '2 tsp sugar', '1/2 tsp dried basil', '1/2 tsp dried oregano', 'dash of garlic', '16 oz spaghetti noodles'], directions: '1. Brown your hamburger in a large pan.\n2. Once cooked, throw in salt, pepper, tomato sauce and paste, water (with the bouillon cubes in it), sugar, basil, oregano and garlic. Simmer on low for an hour.\n3. A few minutes before the hour is done, cook box of spaghetti noodles as directed on package.\n4. Once the noodles are cooked, drain and add to spaghetti sauce.'},
                {name: 'Vanilla Ice Cream', ingredients: ['1 3/4 cups heavy cream', '1 1/4 cup whole milk', '3/4 cup sugar', '1/8 tsp fine sea salt', '1 tbsp vanilla extract or 1 vanilla bean split in half lengthwise'], directions: '- Pour 1 cup of the cream into a saucepan and add the sugar, salt. Scrape the seeds of the vanilla bean into the pot and then add the vanilla pod to the pot. Warm the mixture over medium heat, just until the sugar dissolves. Remove from the heat and add the remaining cream, milk, and vanilla extract (if using extract). Stir to combine and chill in the refrigerator.\n- When ready to churn, remove the vanilla pod, whisk mixture again and pour into ice cream maker. Churn according to the manufacturer\'s instructions. \n- Transfer the finished ice cream to an airtight container and place in the freezer until ready to serve.'}
            ],
      operation: '',
      selectedIndex: -1
    }
  }

  componentDidMount() {
    let recipes = JSON.parse(localStorage.getItem(LocalStorageKey));
    //if any recipes found in the local storage, load them, else the default recipes will display
    if (recipes && recipes.length)
      this.setState({recipes});
  }
  
  displayRecipe = index => {
    this.setState({operation: DISPLAY,
                   selectedIndex: index
    });
  }
  
  addRecipe = () => {
    this.setState({operation: ADD});
  }

  editRecipe = index => {
    this.setState({operation: EDIT, 
                   selectedIndex: index
    });
  }
  
  confirmDelete = index => {
    this.setState({operation: DELETE,
                   selectedIndex: index
    });
  }

  processRecipe = (newRecipe) => {
    let recipes;
    switch (this.state.operation) {
      case ADD: 
        recipes = [...this.state.recipes, 
                      {name: newRecipe.name, 
                       ingredients: newRecipe.ingredients,
                       directions: newRecipe.directions}
                  ];
        break;
      
      case EDIT: 
        recipes = [...this.state.recipes];
        recipes[this.state.selectedIndex] = {name: newRecipe.name, 
                                             ingredients: newRecipe.ingredients,
                                             directions: newRecipe.directions};
        break;

      case DELETE:
        recipes = [...this.state.recipes];
        recipes.splice(this.state.selectedIndex, 1);
        break;
    }
    
    this.setState({recipes});    
    this.storeLocally(recipes);
    this.closeModal();
  }

  storeLocally = recipes => {
    localStorage.setItem(LocalStorageKey, JSON.stringify(recipes));
  }
  
  closeModal = () => {
    this.setState({operation: '',
                   selectedIndex: 0
    });
  }
  
  displayInfo = () => {
    this.setState({operation: INFO});
  }
  
  render() {
    return(
      <div id="recipeBox">
        <HeaderButtons addRecipe={this.addRecipe} displayInfo={this.displayInfo}/>
        
        { this.state.recipes.length === 0 ? (
          <div class="noRecipe">
            <p>No recipes found. Please add new recipes.</p>
          </div>
        ) : 
        (
          <div id="recipeList">
            { this.state.recipes.map( (recipe, i) => (
              <Recipe 
                id={i} 
                recipe={recipe} 
                displayRecipe={() => this.displayRecipe(i)}
                editRecipe={() => this.editRecipe(i)}
                confirmDelete={() => this.confirmDelete(i)} 
                />
            )) 
            }
          </div>
        )}
        
        {(this.state.operation === ADD || this.state.operation === EDIT) && 
          <RecipeCard
            operation={this.state.operation}
            recipe={this.state.operation === EDIT ? this.state.recipes[this.state.selectedIndex]: {}}
            closeModal={this.closeModal} 
            processRecipe={this.processRecipe}
          />
        }

        {this.state.operation === DISPLAY && 
          <DisplayRecipe
            recipe={this.state.recipes[this.state.selectedIndex]}
            closeModal={this.closeModal} 
          />
        }
        
        {this.state.operation === DELETE && 
          <ConfirmDelete 
            closeModal={this.closeModal} 
            processRecipe={this.processRecipe}
          />
        }

        {this.state.operation === INFO && 
          <DisplayInfo closeModal={this.closeModal} />
        }
      </div>
    )
  }
}

const Footer = () => {
  return(
    <div id="footer">
      <p>Designed and coded by</p>
      <a target="_blank" href="https://s.codepen.io/atiyahaider/debug/oaZxeb/dGrXWdOKgPWM">Atiya Haider</a>
    </div>
  )
}

const RecipeBox = () => {
  return (
    <div>
      <h1>Recipe Box</h1>
      <RecipeList />
      <Footer />
    </div>
  )
}

ReactDOM.render(<RecipeBox />, document.getElementById('recipeBoxApp'));